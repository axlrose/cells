!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AUTORESET_DEVICE	USBaccess.h	/^								AUTORESET_DEVICE=0x06,$/;"	e	enum:CUSBaccess::USBtype_enum
AUTORESET_DEVICE	USBaccessBasic.h	/^			AUTORESET_DEVICE=0x06,$/;"	e	enum:cwUSBtype_enum
BUTTON_NODEVICE	USBaccess.h	/^								BUTTON_NODEVICE=0x1000$/;"	e	enum:CUSBaccess::USBtype_enum
CONFIGURE_SWITCH	main.cpp	144;"	d	file:
CONTACT00_DEVICE	USBaccess.h	/^								CONTACT00_DEVICE=0x30, CONTACT01_DEVICE=0x31, CONTACT02_DEVICE=0x32, CONTACT03_DEVICE=0x33,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT01_DEVICE	USBaccess.h	/^								CONTACT00_DEVICE=0x30, CONTACT01_DEVICE=0x31, CONTACT02_DEVICE=0x32, CONTACT03_DEVICE=0x33,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT02_DEVICE	USBaccess.h	/^								CONTACT00_DEVICE=0x30, CONTACT01_DEVICE=0x31, CONTACT02_DEVICE=0x32, CONTACT03_DEVICE=0x33,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT03_DEVICE	USBaccess.h	/^								CONTACT00_DEVICE=0x30, CONTACT01_DEVICE=0x31, CONTACT02_DEVICE=0x32, CONTACT03_DEVICE=0x33,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT04_DEVICE	USBaccess.h	/^								CONTACT04_DEVICE=0x34, CONTACT05_DEVICE=0x35, CONTACT06_DEVICE=0x36, CONTACT07_DEVICE=0x37,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT05_DEVICE	USBaccess.h	/^								CONTACT04_DEVICE=0x34, CONTACT05_DEVICE=0x35, CONTACT06_DEVICE=0x36, CONTACT07_DEVICE=0x37,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT06_DEVICE	USBaccess.h	/^								CONTACT04_DEVICE=0x34, CONTACT05_DEVICE=0x35, CONTACT06_DEVICE=0x36, CONTACT07_DEVICE=0x37,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT07_DEVICE	USBaccess.h	/^								CONTACT04_DEVICE=0x34, CONTACT05_DEVICE=0x35, CONTACT06_DEVICE=0x36, CONTACT07_DEVICE=0x37,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT08_DEVICE	USBaccess.h	/^								CONTACT08_DEVICE=0x38, CONTACT09_DEVICE=0x39, CONTACT10_DEVICE=0x3a, CONTACT11_DEVICE=0x3b,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT09_DEVICE	USBaccess.h	/^								CONTACT08_DEVICE=0x38, CONTACT09_DEVICE=0x39, CONTACT10_DEVICE=0x3a, CONTACT11_DEVICE=0x3b,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT10_DEVICE	USBaccess.h	/^								CONTACT08_DEVICE=0x38, CONTACT09_DEVICE=0x39, CONTACT10_DEVICE=0x3a, CONTACT11_DEVICE=0x3b,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT11_DEVICE	USBaccess.h	/^								CONTACT08_DEVICE=0x38, CONTACT09_DEVICE=0x39, CONTACT10_DEVICE=0x3a, CONTACT11_DEVICE=0x3b,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT12_DEVICE	USBaccess.h	/^								CONTACT12_DEVICE=0x3c, CONTACT13_DEVICE=0x3d, CONTACT14_DEVICE=0x3e, CONTACT15_DEVICE=0x3f,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT13_DEVICE	USBaccess.h	/^								CONTACT12_DEVICE=0x3c, CONTACT13_DEVICE=0x3d, CONTACT14_DEVICE=0x3e, CONTACT15_DEVICE=0x3f,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT14_DEVICE	USBaccess.h	/^								CONTACT12_DEVICE=0x3c, CONTACT13_DEVICE=0x3d, CONTACT14_DEVICE=0x3e, CONTACT15_DEVICE=0x3f,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT15_DEVICE	USBaccess.h	/^								CONTACT12_DEVICE=0x3c, CONTACT13_DEVICE=0x3d, CONTACT14_DEVICE=0x3e, CONTACT15_DEVICE=0x3f,$/;"	e	enum:CUSBaccess::USBtype_enum
CONTACT1_DEVICE	USBaccessBasic.h	/^			CONTACT1_DEVICE=0x30 $/;"	e	enum:cwUSBtype_enum
COUNTER_0	USBaccess.h	/^		enum COUNTER_IDs {		COUNTER_0=0, COUNTER_1=1 } ;$/;"	e	enum:CUSBaccess::COUNTER_IDs
COUNTER_1	USBaccess.h	/^		enum COUNTER_IDs {		COUNTER_0=0, COUNTER_1=1 } ;$/;"	e	enum:CUSBaccess::COUNTER_IDs
COUNTER_IDs	USBaccess.h	/^		enum COUNTER_IDs {		COUNTER_0=0, COUNTER_1=1 } ;$/;"	g	class:CUSBaccess
CUSBaccess	USBaccess.cpp	/^CUSBaccess::CUSBaccess() {$/;"	f	class:CUSBaccess
CUSBaccess	USBaccess.h	/^class CUSBaccess {$/;"	c
CalmWatchdog	USBaccess.cpp	/^CUSBaccess::CalmWatchdog(int deviceNo, int minutes, int minutes2restart) {$/;"	f	class:CUSBaccess
CloseCleware	USBaccess.cpp	/^CUSBaccess::CloseCleware() {$/;"	f	class:CUSBaccess
DEBUG	Makefile	/^DEBUG=-g$/;"	m
EEread	USBaccess.h	/^		enum USBactions {		LEDs=0, EEwrite=1, EEread=2, Reset=3, KeepCalm=4, GetInfo=5,$/;"	e	enum:CUSBaccess::USBactions
EEwrite	USBaccess.h	/^		enum USBactions {		LEDs=0, EEwrite=1, EEread=2, Reset=3, KeepCalm=4, GetInfo=5,$/;"	e	enum:CUSBaccess::USBactions
ENCODER01_DEVICE	USBaccess.h	/^								ENCODER01_DEVICE=0x80,$/;"	e	enum:CUSBaccess::USBtype_enum
GetCounter	USBaccess.cpp	/^CUSBaccess::GetCounter(int deviceNo, enum COUNTER_IDs counter) {$/;"	f	class:CUSBaccess
GetDLLVersion	USBaccess.h	/^		int			GetDLLVersion() { return USBaccessVersion ; }$/;"	f	class:CUSBaccess
GetHumidity	USBaccess.cpp	/^CUSBaccess::GetHumidity(int deviceNo, double *Humidity, int *timeID) {$/;"	f	class:CUSBaccess
GetInfo	USBaccess.h	/^		enum USBactions {		LEDs=0, EEwrite=1, EEread=2, Reset=3, KeepCalm=4, GetInfo=5,$/;"	e	enum:CUSBaccess::USBactions
GetManualOnCount	USBaccess.cpp	/^CUSBaccess::GetManualOnCount(int deviceNo) {$/;"	f	class:CUSBaccess
GetManualOnTime	USBaccess.cpp	/^CUSBaccess::GetManualOnTime(int deviceNo) {$/;"	f	class:CUSBaccess
GetMultiSwitch	USBaccess.cpp	/^CUSBaccess::GetMultiSwitch(int deviceNo, unsigned long int *mask, unsigned long int *value, int seqNumber) {$/;"	f	class:CUSBaccess
GetOnlineOnCount	USBaccess.cpp	/^CUSBaccess::GetOnlineOnCount(int deviceNo) {$/;"	f	class:CUSBaccess
GetOnlineOnTime	USBaccess.cpp	/^CUSBaccess::GetOnlineOnTime(int deviceNo) {$/;"	f	class:CUSBaccess
GetSeqSwitch	USBaccess.cpp	/^CUSBaccess::GetSeqSwitch(int deviceNo, enum SWITCH_IDs Switch, int seqNumber) {$/;"	f	class:CUSBaccess
GetSerialNumber	USBaccess.cpp	/^CUSBaccess::GetSerialNumber(int deviceNo) {$/;"	f	class:CUSBaccess
GetSwitch	USBaccess.cpp	/^CUSBaccess::GetSwitch(int deviceNo, enum SWITCH_IDs Switch) {$/;"	f	class:CUSBaccess
GetSwitchConfig	USBaccess.cpp	/^CUSBaccess::GetSwitchConfig(int deviceNo, int *switchCount, int *buttonAvailable) {$/;"	f	class:CUSBaccess
GetTemperature	USBaccess.cpp	/^CUSBaccess::GetTemperature(int deviceNo, double *Temperature, int *timeID) {$/;"	f	class:CUSBaccess
GetUSBType	USBaccess.cpp	/^CUSBaccess::GetUSBType(int deviceNo) {$/;"	f	class:CUSBaccess
GetValue	USBaccess.cpp	/^CUSBaccess::GetValue(int deviceNo, unsigned char *buf, int bufsize) {$/;"	f	class:CUSBaccess
GetVersion	USBaccess.cpp	/^CUSBaccess::GetVersion(int deviceNo) {$/;"	f	class:CUSBaccess
HANDLE	USBaccess.h	/^typedef int HANDLE ;$/;"	t
HUMIDITY1_DEVICE	USBaccess.h	/^								HUMIDITY1_DEVICE=0x20,$/;"	e	enum:CUSBaccess::USBtype_enum
HUMIDITY1_DEVICE	USBaccessBasic.h	/^			HUMIDITY1_DEVICE=0x20,$/;"	e	enum:cwUSBtype_enum
ILLEGAL_DEVICE	USBaccess.h	/^		enum USBtype_enum {		ILLEGAL_DEVICE=0,$/;"	e	enum:CUSBaccess::USBtype_enum
ILLEGAL_DEVICE	USBaccessBasic.h	/^enum cwUSBtype_enum {	ILLEGAL_DEVICE=0,$/;"	e	enum:cwUSBtype_enum
KeepCalm	USBaccess.h	/^		enum USBactions {		LEDs=0, EEwrite=1, EEread=2, Reset=3, KeepCalm=4, GetInfo=5,$/;"	e	enum:CUSBaccess::USBactions
LDFLAGS	Makefile	/^LDFLAGS=-lusb-1.0$/;"	m
LED_0	USBaccess.h	/^		enum LED_IDs {			LED_0=0, LED_1=1, LED_2=2, LED_3=3 } ;$/;"	e	enum:CUSBaccess::LED_IDs
LED_1	USBaccess.h	/^		enum LED_IDs {			LED_0=0, LED_1=1, LED_2=2, LED_3=3 } ;$/;"	e	enum:CUSBaccess::LED_IDs
LED_2	USBaccess.h	/^		enum LED_IDs {			LED_0=0, LED_1=1, LED_2=2, LED_3=3 } ;$/;"	e	enum:CUSBaccess::LED_IDs
LED_3	USBaccess.h	/^		enum LED_IDs {			LED_0=0, LED_1=1, LED_2=2, LED_3=3 } ;$/;"	e	enum:CUSBaccess::LED_IDs
LED_DEVICE	USBaccess.h	/^								LED_DEVICE=0x01,$/;"	e	enum:CUSBaccess::USBtype_enum
LED_DEVICE	USBaccessBasic.h	/^			LED_DEVICE=0x01,$/;"	e	enum:cwUSBtype_enum
LED_IDs	USBaccess.h	/^		enum LED_IDs {			LED_0=0, LED_1=1, LED_2=2, LED_3=3 } ;$/;"	g	class:CUSBaccess
LEDs	USBaccess.h	/^		enum USBactions {		LEDs=0, EEwrite=1, EEread=2, Reset=3, KeepCalm=4, GetInfo=5,$/;"	e	enum:CUSBaccess::USBactions
MULTISWITCH_DIRECTION	main.cpp	143;"	d	file:
ManualCount	USBaccess.h	/^		enum USBInfoType {		OnlineTime=1, OnlineCount=2, ManualTime=3, ManualCount=4 } ;$/;"	e	enum:CUSBaccess::USBInfoType
ManualTime	USBaccess.h	/^		enum USBInfoType {		OnlineTime=1, OnlineCount=2, ManualTime=3, ManualCount=4 } ;$/;"	e	enum:CUSBaccess::USBInfoType
NO_COMMAND	main.cpp	131;"	d	file:
OBJS	Makefile	/^OBJS=USBaccessBasic.o USBaccess.o main.o$/;"	m
OnlineCount	USBaccess.h	/^		enum USBInfoType {		OnlineTime=1, OnlineCount=2, ManualTime=3, ManualCount=4 } ;$/;"	e	enum:CUSBaccess::USBInfoType
OnlineTime	USBaccess.h	/^		enum USBInfoType {		OnlineTime=1, OnlineCount=2, ManualTime=3, ManualCount=4 } ;$/;"	e	enum:CUSBaccess::USBInfoType
OpenCleware	USBaccess.cpp	/^CUSBaccess::OpenCleware() {$/;"	f	class:CUSBaccess
READ_AUTO_RESET	main.cpp	140;"	d	file:
READ_EXTERNAL_SWITCH	main.cpp	139;"	d	file:
READ_HUMIDITY	main.cpp	136;"	d	file:
READ_MULTISWITCH	main.cpp	141;"	d	file:
READ_SWITCH	main.cpp	133;"	d	file:
READ_TEMP	main.cpp	132;"	d	file:
RESET_DEVICE	main.cpp	134;"	d	file:
Recover	USBaccess.cpp	/^CUSBaccess::Recover(int devNum) {$/;"	f	class:CUSBaccess
Reset	USBaccess.h	/^		enum USBactions {		LEDs=0, EEwrite=1, EEread=2, Reset=3, KeepCalm=4, GetInfo=5,$/;"	e	enum:CUSBaccess::USBactions
ResetDevice	USBaccess.cpp	/^CUSBaccess::ResetDevice(int deviceNo) {$/;"	f	class:CUSBaccess
RunPoint	USBaccess.h	/^								RunPoint=10				\/\/ USB-Encoder$/;"	e	enum:CUSBaccess::USBactions
SET_LED	main.cpp	138;"	d	file:
SET_MULTISWITCH	main.cpp	142;"	d	file:
SET_SWITCH	main.cpp	135;"	d	file:
START_DEVICE	main.cpp	137;"	d	file:
SWITCH1_DEVICE	USBaccess.h	/^								SWITCH1_DEVICE=0x08,$/;"	e	enum:CUSBaccess::USBtype_enum
SWITCH1_DEVICE	USBaccessBasic.h	/^			SWITCH1_DEVICE=0x08,$/;"	e	enum:cwUSBtype_enum
SWITCH2_DEVICE	USBaccess.h	/^								SWITCH2_DEVICE=0x09, SWITCH3_DEVICE=0x0a, SWITCH4_DEVICE=0x0c,$/;"	e	enum:CUSBaccess::USBtype_enum
SWITCH3_DEVICE	USBaccess.h	/^								SWITCH2_DEVICE=0x09, SWITCH3_DEVICE=0x0a, SWITCH4_DEVICE=0x0c,$/;"	e	enum:CUSBaccess::USBtype_enum
SWITCH4_DEVICE	USBaccess.h	/^								SWITCH2_DEVICE=0x09, SWITCH3_DEVICE=0x0a, SWITCH4_DEVICE=0x0c,$/;"	e	enum:CUSBaccess::USBtype_enum
SWITCH_0	USBaccess.h	/^		enum SWITCH_IDs {		SWITCH_0=0x10, SWITCH_1=0x11, SWITCH_2=0x12, SWITCH_3=0x13,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_1	USBaccess.h	/^		enum SWITCH_IDs {		SWITCH_0=0x10, SWITCH_1=0x11, SWITCH_2=0x12, SWITCH_3=0x13,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_10	USBaccess.h	/^								SWITCH_8=0x18, SWITCH_9=0x19, SWITCH_10=0x1a, SWITCH_11=0x1b,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_11	USBaccess.h	/^								SWITCH_8=0x18, SWITCH_9=0x19, SWITCH_10=0x1a, SWITCH_11=0x1b,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_12	USBaccess.h	/^								SWITCH_12=0x1c, SWITCH_13=0x1d, SWITCH_14=0x1e, SWITCH_15=0x1f$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_13	USBaccess.h	/^								SWITCH_12=0x1c, SWITCH_13=0x1d, SWITCH_14=0x1e, SWITCH_15=0x1f$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_14	USBaccess.h	/^								SWITCH_12=0x1c, SWITCH_13=0x1d, SWITCH_14=0x1e, SWITCH_15=0x1f$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_15	USBaccess.h	/^								SWITCH_12=0x1c, SWITCH_13=0x1d, SWITCH_14=0x1e, SWITCH_15=0x1f$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_2	USBaccess.h	/^		enum SWITCH_IDs {		SWITCH_0=0x10, SWITCH_1=0x11, SWITCH_2=0x12, SWITCH_3=0x13,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_3	USBaccess.h	/^		enum SWITCH_IDs {		SWITCH_0=0x10, SWITCH_1=0x11, SWITCH_2=0x12, SWITCH_3=0x13,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_4	USBaccess.h	/^								SWITCH_4=0x14, SWITCH_5=0x15, SWITCH_6=0x16, SWITCH_7=0x17,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_5	USBaccess.h	/^								SWITCH_4=0x14, SWITCH_5=0x15, SWITCH_6=0x16, SWITCH_7=0x17,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_6	USBaccess.h	/^								SWITCH_4=0x14, SWITCH_5=0x15, SWITCH_6=0x16, SWITCH_7=0x17,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_7	USBaccess.h	/^								SWITCH_4=0x14, SWITCH_5=0x15, SWITCH_6=0x16, SWITCH_7=0x17,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_8	USBaccess.h	/^								SWITCH_8=0x18, SWITCH_9=0x19, SWITCH_10=0x1a, SWITCH_11=0x1b,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_9	USBaccess.h	/^								SWITCH_8=0x18, SWITCH_9=0x19, SWITCH_10=0x1a, SWITCH_11=0x1b,$/;"	e	enum:CUSBaccess::SWITCH_IDs
SWITCH_IDs	USBaccess.h	/^		enum SWITCH_IDs {		SWITCH_0=0x10, SWITCH_1=0x11, SWITCH_2=0x12, SWITCH_3=0x13,$/;"	g	class:CUSBaccess
SerialNumber	USBaccessBasic.h	/^	int	SerialNumber;$/;"	m	struct:__anon1
SetLED	USBaccess.cpp	/^CUSBaccess::SetLED(int deviceNo, enum LED_IDs Led, int value) {$/;"	f	class:CUSBaccess
SetMultiConfig	USBaccess.cpp	/^CUSBaccess::SetMultiConfig(int deviceNo, unsigned long int directions) {	\/\/ 0=input, 1=output$/;"	f	class:CUSBaccess
SetMultiSwitch	USBaccess.cpp	/^CUSBaccess::SetMultiSwitch(int deviceNo, unsigned long int value) {$/;"	f	class:CUSBaccess
SetSwitch	USBaccess.cpp	/^CUSBaccess::SetSwitch(int deviceNo, enum SWITCH_IDs Switch, int On) {$/;"	f	class:CUSBaccess
SetValue	USBaccess.cpp	/^CUSBaccess::SetValue(int deviceNo, unsigned char *buf, int bufsize) {$/;"	f	class:CUSBaccess
Sleep	USBaccess.h	/^		void		Sleep(int ms) { usleep(ms * 1000) ; }	\/\/ for Linux$/;"	f	class:CUSBaccess
StartDevice	USBaccess.cpp	/^CUSBaccess::StartDevice(int deviceNo) {		\/\/ mask in case of CONTACT00-device$/;"	f	class:CUSBaccess
StartMeasuring	USBaccess.h	/^								StartMeasuring=6,		\/\/ USB-Humidity$/;"	e	enum:CUSBaccess::USBactions
SyncDevice	USBaccess.cpp	/^CUSBaccess::SyncDevice(int deviceNo, unsigned long int mask) {		\/\/ mask in case of CONTACT00-device$/;"	f	class:CUSBaccess
TEMPERATURE2_DEVICE	USBaccess.h	/^								TEMPERATURE2_DEVICE=0x11,$/;"	e	enum:CUSBaccess::USBtype_enum
TEMPERATURE2_DEVICE	USBaccessBasic.h	/^			TEMPERATURE2_DEVICE=0x11,$/;"	e	enum:cwUSBtype_enum
TEMPERATURE5_DEVICE	USBaccess.h	/^								TEMPERATURE5_DEVICE=0x15,$/;"	e	enum:CUSBaccess::USBtype_enum
TEMPERATURE5_DEVICE	USBaccessBasic.h	/^			TEMPERATURE5_DEVICE=0x15, $/;"	e	enum:cwUSBtype_enum
TEMPERATURE_DEVICE	USBaccess.h	/^								TEMPERATURE_DEVICE=0x10,$/;"	e	enum:CUSBaccess::USBtype_enum
TEMPERATURE_DEVICE	USBaccessBasic.h	/^			TEMPERATURE_DEVICE=0x10,$/;"	e	enum:cwUSBtype_enum
TIMEOUT	USBaccessBasic.cpp	22;"	d	file:
USBInfoType	USBaccess.h	/^		enum USBInfoType {		OnlineTime=1, OnlineCount=2, ManualTime=3, ManualCount=4 } ;$/;"	g	class:CUSBaccess
USBaccessVersion	USBaccess.h	/^const int USBaccessVersion = 109 ;$/;"	v
USBactions	USBaccess.h	/^		enum USBactions {		LEDs=0, EEwrite=1, EEread=2, Reset=3, KeepCalm=4, GetInfo=5,$/;"	g	class:CUSBaccess
USBtype_enum	USBaccess.h	/^		enum USBtype_enum {		ILLEGAL_DEVICE=0,$/;"	g	class:CUSBaccess
VERSION	Makefile	/^VERSION=2.0-alpha003$/;"	m
WATCHDOG_DEVICE	USBaccess.h	/^								WATCHDOG_DEVICE=0x05,$/;"	e	enum:CUSBaccess::USBtype_enum
WATCHDOG_DEVICE	USBaccessBasic.h	/^			WATCHDOG_DEVICE=0x05,$/;"	e	enum:cwUSBtype_enum
__USBACCESSBASIC_H__	USBaccessBasic.h	13;"	d
__USBACCESS_H__	USBaccess.h	27;"	d
brief	main.cpp	/^char brief = 0;$/;"	v
context	USBaccessBasic.cpp	/^libusb_context *context = NULL;$/;"	v
cwCloseCleware	USBaccessBasic.cpp	/^void cwCloseCleware()$/;"	f
cwGetHandle	USBaccessBasic.cpp	/^struct libusb_device_handle * cwGetHandle(int deviceNo)$/;"	f
cwGetSerialNumber	USBaccessBasic.cpp	/^int cwGetSerialNumber(int deviceNo)$/;"	f
cwGetUSBType	USBaccessBasic.cpp	/^enum cwUSBtype_enum cwGetUSBType(int deviceNo)$/;"	f
cwGetValue	USBaccessBasic.cpp	/^int cwGetValue(int deviceNo, unsigned char *buf, int bufsize)$/;"	f
cwGetVersion	USBaccessBasic.cpp	/^int cwGetVersion(int deviceNo)$/;"	f
cwInitCleware	USBaccessBasic.cpp	/^void cwInitCleware()$/;"	f
cwOpenCleware	USBaccessBasic.cpp	/^int cwOpenCleware()$/;"	f
cwRecover	USBaccessBasic.cpp	/^int cwRecover(int devNo)$/;"	f
cwSUSBdata	USBaccessBasic.h	/^	} cwSUSBdata;$/;"	t	typeref:struct:__anon1
cwSetValue	USBaccessBasic.cpp	/^int cwSetValue(int deviceNo, unsigned char *buf, int bufsize)$/;"	f
cwUSBtype_enum	USBaccessBasic.h	/^enum cwUSBtype_enum {	ILLEGAL_DEVICE=0,$/;"	g
data	USBaccessBasic.cpp	/^cwSUSBdata data[128] ;$/;"	v
device_id_to_string	main.cpp	/^const char * device_id_to_string(int id)$/;"	f
do_command	main.cpp	/^int do_command(int device_id, int command, int par, int par2, double offset)$/;"	f
find_usb_id	main.cpp	/^int find_usb_id(CUSBaccess *pCWusb, int dev_count, int device_id)$/;"	f
gadgetVersionNo	USBaccessBasic.h	/^	int	gadgetVersionNo;$/;"	m	struct:__anon1
gadgettype	USBaccessBasic.h	/^	enum cwUSBtype_enum	gadgettype;$/;"	m	struct:__anon1	typeref:enum:__anon1::cwUSBtype_enum
handle	USBaccessBasic.h	/^	struct libusb_device_handle *handle;$/;"	m	struct:__anon1	typeref:struct:__anon1::libusb_device_handle
list_devices	main.cpp	/^void list_devices(void)$/;"	f
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
maxHID	USBaccessBasic.cpp	/^const int maxHID = 128 ;$/;"	v
report_type	USBaccessBasic.h	/^	int	report_type;$/;"	m	struct:__anon1
retry_count	main.cpp	/^int retry_count = 10;$/;"	v
start_tapping_the_watchdog	main.cpp	/^int start_tapping_the_watchdog(int device_id)$/;"	f
usage	main.cpp	/^void usage(void)$/;"	f
version	main.cpp	/^void version(void)$/;"	f
~CUSBaccess	USBaccess.cpp	/^CUSBaccess::~CUSBaccess() {$/;"	f	class:CUSBaccess
